networks:
  traefik_default:
    external: true
    name: traefik_default
services:
  backend:
    build:
      context: /Users/Maronato/Documents/event-manager/app
      dockerfile: backend.dockerfile
    command:
    - daphne
    - project.asgi:application
    - --port
    - '8000'
    - --bind
    - 0.0.0.0
    - -v2
    depends_on:
    - db
    - redis
    deploy:
      labels:
        traefik.backend: backend
        traefik.enable: "true"
        traefik.frontend.rule: PathPrefix:/
        traefik.port: '8000'
        traefik.tags: localhost
      replicas: 1
      restart_policy:
        condition: on-failure
    environment:
      APP_ENV: prod
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/0
      DEBUG: "False"
      DJANGO_SETTINGS_MODULE: project.settings
      NODE_ENV: production
      POSTGRES_DB: app
      POSTGRES_PASSWORD: pass
      POSTGRES_SERVER: db
      POSTGRES_USER: postgres
      REDIS_URL: redis://redis:6379/0
      SERVER_HOST: http://localhost
      SERVER_NAME: localhost
      SUPERUSER_EMAIL: gustavomaronato@gmail.com
      SUPERUSER_NAME: admin
      SUPERUSER_PASSWORD: password
    image: maronato/event-manager-backend:latest
    networks:
      default: null
      traefik_default: null
    ports:
    - target: 8000
    volumes:
    - /Users/Maronato/Documents/event-manager/app/.env:/app/.env:rw
  celerybeat:
    build:
      context: /Users/Maronato/Documents/event-manager/app
      dockerfile: worker.dockerfile
    command: celery -A project beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    depends_on:
    - backend
    - db
    - redis
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    environment:
      APP_ENV: prod
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/0
      DEBUG: "False"
      DJANGO_SETTINGS_MODULE: project.settings
      POSTGRES_DB: app
      POSTGRES_PASSWORD: pass
      POSTGRES_SERVER: db
      POSTGRES_USER: postgres
      REDIS_URL: redis://redis:6379/0
      SERVER_HOST: http://localhost
      SUPERUSER_EMAIL: gustavomaronato@gmail.com
      SUPERUSER_NAME: admin
      SUPERUSER_PASSWORD: password
    image: maronato/event-manager-worker:latest
    volumes:
    - /Users/Maronato/Documents/event-manager/app/.env:/app/.env:rw
  celeryworker:
    build:
      context: /Users/Maronato/Documents/event-manager/app
      dockerfile: worker.dockerfile
    command: celery -A project worker -l info
    depends_on:
    - backend
    - db
    - redis
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    environment:
      APP_ENV: prod
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/0
      DEBUG: "False"
      DJANGO_SETTINGS_MODULE: project.settings
      POSTGRES_DB: app
      POSTGRES_PASSWORD: pass
      POSTGRES_SERVER: db
      POSTGRES_USER: postgres
      REDIS_URL: redis://redis:6379/0
      SERVER_HOST: http://localhost
      SUPERUSER_EMAIL: gustavomaronato@gmail.com
      SUPERUSER_NAME: admin
      SUPERUSER_PASSWORD: password
    image: maronato/event-manager-worker:latest
    volumes:
    - /Users/Maronato/Documents/event-manager/app/.env:/app/.env:rw
  db:
    environment:
      PGDATA: /var/lib/postgresql/data/pgdata
      POSTGRES_DB: app
      POSTGRES_PASSWORD: pass
      POSTGRES_SERVER: db
      POSTGRES_USER: postgres
    image: postgres:alpine
    restart: always
    volumes:
    - app-db-data:/var/lib/postgresql/data/pgdata:rw
  exporter:
    depends_on:
    - prometheus
    image: prom/node-exporter:latest
    restart: always
  grafana:
    depends_on:
    - prometheus
    deploy:
      labels:
        traefik.backend: grafana
        traefik.docker.network: traefik_default
        traefik.enable: "true"
        traefik.frontend.rule: Host:grafana.localhost
        traefik.port: '2000'
        traefik.redirectorservice.frontend.entryPoints: http
        traefik.redirectorservice.frontend.redirect.entryPoint: https
        traefik.tags: localhost
        traefik.webservice.frontend.entryPoints: https
    environment:
      GF_SECURITY_ADMIN_PASSWORD: pass
    image: grafana/grafana
    networks:
      traefik_default: null
    ports:
    - target: 3000
    restart: always
    volumes:
    - grafana_data:/var/lib/grafana:rw
  portainer:
    deploy:
      labels:
        traefik.backend: portainer
        traefik.enable: "true"
        traefik.frontend.rule: Host:portainer.localhost
        traefik.port: '9000'
        traefik.tags: localhost
      replicas: 1
      restart_policy:
        condition: on-failure
    image: portainer/portainer
    networks:
      traefik_default: null
    ports:
    - target: 9000
    restart: always
    volumes:
    - portainer_data:/data:rw
    - /var/run/docker.sock:/var/run/docker.sock:rw
  prometheus:
    image: prom/prometheus:v2.9.1
    ports:
    - target: 9090
    restart: always
    volumes:
    - /Users/Maronato/Documents/event-manager/alerts:/etc/prometheus/alerts:rw
    - /Users/Maronato/Documents/event-manager/prometheus.yml:/etc/prometheus/prometheus.yml:rw
  proxy:
    command: --docker \ --docker.swarmmode \ --docker.watch \ --docker.exposedbydefault=false
      \ --constraints=tag==localhost \ --logLevel=INFO \ --accessLog \ --web
    deploy:
      labels:
        traefik.docker.network: traefik_default
        traefik.enable: "true"
        traefik.frontend.rule: Host:www.localhost,localhost
        traefik.port: '80'
        traefik.servicehttp.frontend.entryPoints: http
        traefik.servicehttp.frontend.redirect.entryPoint: https
        traefik.servicehttps.frontend.entryPoints: https
        traefik.servicehttps.frontend.redirect.regex: ^https?://(www.)?(localhost)/(.*)
        traefik.servicehttps.frontend.redirect.replacement: https://localhost/$$3
        traefik.tags: localhost
      placement:
        constraints:
        - node.role == manager
      replicas: 1
      restart_policy:
        condition: on-failure
    environment:
      DO_AUTH_TOKEN: <yourtoken>
    image: traefik:v1.7
    networks:
      traefik_default: null
    ports:
    - published: 80
      target: 80
    - published: 443
      target: 443
    - published: 8090
      target: 8080
    volumes:
    - /Users/Maronato/Documents/event-manager/acme.json:/acme.json:rw
    - /Users/Maronato/Documents/event-manager/traefik.toml:/traefik.toml:rw
    - /var/run/docker.sock:/var/run/docker.sock:rw
  redis:
    image: redis:5.0.4-alpine
    restart: always
    volumes:
    - app-redis-data:/data:rw
  redis-exporter:
    command:
    - --redis.addr=redis://redis:6379
    depends_on:
    - prometheus
    - redis
    image: oliver006/redis_exporter
    ports:
    - target: 9121
    restart: always
version: '3.7'
volumes:
  app-db-data: {}
  app-redis-data: {}
  grafana_data: {}
  portainer_data: {}
  prometheus_data: {}

